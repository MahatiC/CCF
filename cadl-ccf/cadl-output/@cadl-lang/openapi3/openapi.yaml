openapi: 3.0.0
info:
  title: CCF governance
  version: '2023-02-20'
tags: []
paths:
  /gov/ack:
    post:
      operationId: ack
      summary: Provide a member endorsement of a service state digest
      parameters: []
      responses:
        '204':
          description: >-
            There is no content to send for this request, but the headers may be
            useful. 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StateDigest'
  /gov/ack/update_state_digest:
    post:
      operationId: updateStateDigest
      summary: >-
        Update and fetch a service state digest, for the purpose of member
        endorsement
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StateDigest'
  /gov/commit:
    get:
      operationId: commit
      summary: Current commit level
      description: Latest transaction ID that has been committed on the service
      parameters:
        - name: view_history
          in: query
          required: false
          schema:
            type: boolean
        - name: view_history_since
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCommit'
  /gov/kv/constitution:
    get:
      operationId: getConstitution
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
  /gov/kv/cose_history:
    get:
      operationId: getCoseHistory
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToBase64'
  /gov/kv/cose_recent_proposals:
    get:
      operationId: getCoseRecentProposals
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringtoString'
  /gov/kv/history:
    get:
      operationId: getHistory
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberIdToSignedReq'
  /gov/kv/js_runtime_options:
    get:
      operationId: getJSRuntimeOptions
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSRuntimeOptions'
  /gov/kv/jwt/issuers:
    get:
      operationId: getJwtIssuers
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToJwtIssuerMetadata'
  /gov/kv/jwt/public_signing_key_issuer:
    get:
      operationId: getJwtPublicSigningKeyIssuer
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringtoString'
  /gov/kv/jwt/public_signing_keys:
    get:
      operationId: getJwtPublicSigningKeys
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToBase64'
  /gov/kv/members/acks:
    get:
      operationId: getMembersAcks
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberIdToMemberAck'
  /gov/kv/members/certs:
    get:
      operationId: getMembersCerts
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberIdToPem'
  /gov/kv/members/encryption_public_keys:
    get:
      operationId: getMembersEncryptionPublicKeys
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberIdToPem'
  /gov/kv/members/info:
    get:
      operationId: getMembersInfo
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemberIdToMemberDetails'
  /gov/kv/modules:
    get:
      operationId: getModules
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringtoString'
  /gov/kv/modules_quickjs_bytecode:
    get:
      operationId: getModulesQuickJSBytecode
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToBase64'
  /gov/kv/modules_quickjs_version:
    get:
      operationId: getModulesQuickJSVersion
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: string
  /gov/kv/nodes/endorsed_certificates:
    get:
      operationId: getNodesEndorsedCertificates
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeIdToPem'
  /gov/kv/nodes/info:
    get:
      operationId: getNodesInfo
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeIdToNodeInfo'
  /gov/kv/proposals:
    get:
      operationId: getProposals
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToBase64'
  /gov/kv/proposals_info:
    get:
      operationId: getProposalsInfo
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToProposalInfo'
  /gov/kv/service/acme_certificates:
    get:
      operationId: getServiceAcmeCertificates
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToPem'
  /gov/kv/service/config:
    get:
      operationId: getServiceConfig
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceConfiguration'
  /gov/kv/service/info:
    get:
      operationId: getServiceInfo
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
  /gov/kv/service/previous_service_identity:
    get:
      operationId: getServicePreviousServiceIdentity
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pem'
  /gov/kv/tls/ca_cert_bundles:
    get:
      operationId: getTlsCaCertBundles
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringtoString'
  /gov/kv/users/certs:
    get:
      operationId: getUsersCerts
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdToPem'
  /gov/kv/users/info:
    get:
      operationId: getUsersInfo
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
  /gov/proposals:
    get:
      operationId: proposal_alaproposals
      summary: Proposed changes to the service pending resolution
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringToProposalInfo'
    post:
      operationId: proposal_proposalInfo
      summary: Submit a proposed change to the service
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalInfoSummary'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Proposal'
  /gov/proposals/{proposal_id}:
    get:
      operationId: getProposalId
      summary: Information about a proposed change to the service
      parameters:
        - name: proposal_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalInfo'
  /gov/proposals/{proposal_id}/actions:
    get:
      operationId: getProposalIdActions
      summary: Actions contained in a proposed change to the service
      parameters:
        - name: proposal_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposal'
  /gov/proposals/{proposal_id}/ballots:
    post:
      operationId: postProposalIdBallots
      summary: Ballots submitted against a proposed change to the service
      parameters:
        - name: proposal_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalInfoSummary'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ballot'
  /gov/proposals/{proposal_id}/ballots/{member_id}:
    get:
      operationId: getMemberIdBallot
      summary: Ballot for a given member about a proposed change to the service
      parameters:
        - name: proposal_id
          in: path
          required: true
          schema:
            type: string
        - name: member_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ballot'
  /gov/proposals/{proposal_id}/withdraw:
    post:
      operationId: postProposalIdWithdraw
      summary: Withdraw a proposed change to the service
      parameters:
        - name: proposal_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProposalInfo'
  /gov/receipt:
    get:
      operationId: getReceipt
      summary: Receipt for a transaction
      description: >-
        A signed statement from the service over a transaction entry in the
        ledger
      parameters:
        - name: transactionID
          in: query
          required: true
          schema:
            type: string
            pattern: ^[0-9]+\.[0-9]+$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Json'
  /gov/recovery_share:
    get:
      operationId: recover_getRecoveryShare
      summary: A member's recovery share
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetRecoveryShare'
    post:
      operationId: recover_postRecoveryShare
      summary: >-
        Provide a recovery share for the purpose of completing a service
        recovery
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitRecoveryShareOut'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitRecoveryShareIn'
  /gov/tx:
    get:
      operationId: getTx
      description: Possible statuses returned are Unknown, Pending, Committed or Invalid.
      parameters:
        - name: transactionID
          in: query
          required: true
          schema:
            type: string
            pattern: ^[0-9]+\.[0-9]+$
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTxStatusOut'
components:
  schemas:
    ACME:
      type: object
      properties:
        caCerts:
          type: array
          items:
            type: string
          x-cadl-name: string[]
        challengeType:
          type: string
        contact:
          type: array
          items:
            type: string
          x-cadl-name: string[]
        directoryUrl:
          type: string
        serviceDNSName:
          type: string
        termsOfServiceAgreed:
          type: boolean
      required:
        - caCerts
        - challengeType
        - contact
        - directoryUrl
        - serviceDNSName
        - termsOfServiceAgreed
    ACMEConfigurations:
      type: object
      properties:
        acme:
          $ref: '#/components/schemas/ACME'
      required:
        - acme
    Action:
      type: object
      properties:
        args:
          $ref: '#/components/schemas/Json'
        name:
          type: string
      required:
        - args
        - name
    ActionArray:
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
          x-cadl-name: Action[]
      required:
        - actions
    AppProtocol:
      type: string
      enum:
        - HTTP1
        - HTTP2
    Authority:
      type: string
      enum:
        - Node
        - Service
        - ACME
        - Unsecured
    Ballot:
      type: object
      properties:
        ballot:
          type: string
      required:
        - ballot
    ConsensusType:
      type: string
      enum:
        - BFT
        - CFT
    Endorsement:
      type: object
      properties:
        acmeConfig:
          type: string
        authority:
          $ref: '#/components/schemas/Authority'
      required:
        - authority
    Failure:
      type: object
      properties:
        reason:
          type: string
        trace:
          type: string
      required:
        - reason
    GetCommit:
      type: object
      properties:
        transactionValue:
          $ref: '#/components/schemas/Transaction'
        viewHistory:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
          x-cadl-name: Transaction[]
      required:
        - transactionValue
        - viewHistory
    GetRecoveryShare:
      type: object
      properties:
        encryptedShare:
          type: string
      required:
        - encryptedShare
    GetTxStatusOut:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TxStatus'
        transactionID:
          type: string
          pattern: ^[0-9]+\.[0-9]+$
      required:
        - status
        - transactionID
    HttpConfiguration:
      type: object
      properties:
        initialWindowSize:
          type: string
          pattern: ^[0-9]+(B|KB|MB|GB|TB|PB)?$
        maxBodySize:
          type: string
          pattern: ^[0-9]+(B|KB|MB|GB|TB|PB)?$
        maxConcurrentStreams:
          type: integer
          format: uint64
          minimum: 0
          maximum: 18446744073709552000
        maxFrameSize:
          type: string
          pattern: ^[0-9]+(B|KB|MB|GB|TB|PB)?$
        maxHeaderSize:
          type: string
          pattern: ^[0-9]+(B|KB|MB|GB|TB|PB)?$
        maxHeadersCount:
          type: integer
          format: uint32
          minimum: 0
          maximum: 4294967295
      required:
        - initialWindowSize
        - maxBodySize
        - maxConcurrentStreams
        - maxFrameSize
        - maxHeaderSize
        - maxHeadersCount
    JSRuntimeOptions:
      type: object
      properties:
        maxExecutionTimeInMs:
          type: integer
          format: uint64
        maxHeapBytes:
          type: integer
          format: uint64
        maxStackBytes:
          type: integer
          format: uint64
      required:
        - maxExecutionTimeInMs
        - maxHeapBytes
        - maxStackBytes
    Json: {}
    JwtIssuerKeyFilter:
      type: string
      enum:
        - all
        - sgx
    JwtIssuerKeyPolicy:
      type: object
      properties:
        sgxClaims:
          $ref: '#/components/schemas/StringtoString'
      required:
        - sgxClaims
    JwtIssuerMetadata:
      type: object
      properties:
        autoRefresh:
          type: boolean
        caCertBundleName:
          type: string
        keyFilter:
          $ref: '#/components/schemas/JwtIssuerKeyFilter'
        keyPolicy:
          $ref: '#/components/schemas/JwtIssuerKeyPolicy'
      required:
        - keyFilter
    MDType:
      type: string
      enum:
        - NONE
        - SHA1
        - SHA256
        - SHA384
        - SHA512
    MemberAck:
      type: object
      properties:
        codeSign1Req:
          type: string
          format: base64
        signedReq:
          $ref: '#/components/schemas/SignedReq'
        stateDigest:
          $ref: '#/components/schemas/StateDigest'
      required:
        - stateDigest
    MemberDetails:
      type: object
      properties:
        memberData:
          $ref: '#/components/schemas/Json'
        memberStatus:
          $ref: '#/components/schemas/MemberStatus'
      required:
        - memberData
        - memberStatus
    MemberIdToBase64:
      type: object
      properties:
        memberId:
          type: string
          format: base64
      required:
        - memberId
    MemberIdToBoolean:
      type: object
      properties:
        additionalProperties:
          type: boolean
      required:
        - additionalProperties
    MemberIdToFailure:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/Failure'
      required:
        - additionalProperties
    MemberIdToMemberAck:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/MemberAck'
      required:
        - additionalProperties
    MemberIdToMemberDetails:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/MemberDetails'
      required:
        - additionalProperties
    MemberIdToPem:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Pem'
      required:
        - Id
    MemberIdToSignedReq:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/SignedReq'
      required:
        - additionalProperties
    MemberIdToString:
      type: object
      properties:
        additionalProperties:
          type: string
      required:
        - additionalProperties
    MemberStatus:
      type: string
      enum:
        - Accepted
        - Active
    NodeIdToNodeInfo:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/NodeInfo'
      required:
        - additionalProperties
    NodeIdToPem:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Pem'
      required:
        - Id
    NodeInfo:
      type: object
      properties:
        acmeConfig:
          $ref: '#/components/schemas/ACMEConfigurations'
        cert:
          $ref: '#/components/schemas/Pem'
        certificateSigningRequest:
          $ref: '#/components/schemas/Pem'
        codeDigest:
          type: string
        encryptionPublicKey:
          $ref: '#/components/schemas/Pem'
        ledgetSecretSeqno:
          type: integer
          format: uint64
        nodeData:
          $ref: '#/components/schemas/Json'
        nodeToNodeInterface:
          $ref: '#/components/schemas/NodeToNodeInterface'
        publicKey:
          $ref: '#/components/schemas/Pem'
        quoteInfo:
          $ref: '#/components/schemas/QuoteInfo'
        retiredCommitted:
          type: boolean
        rpcInterfaces:
          $ref: '#/components/schemas/RPCInterfaces'
        status:
          $ref: '#/components/schemas/NodeStatus'
      required:
        - encryptionPublicKey
        - nodeToNodeInterface
        - quoteInfo
        - rpcInterfaces
        - status
    NodeStatus:
      type: string
      enum:
        - Pending
        - Trusted
        - Retired
        - Learner
        - Retiring
    NodeToNodeInterface:
      type: object
      properties:
        acceptedEndpoints:
          type: array
          items:
            type: string
          x-cadl-name: string[]
        appProtocol:
          $ref: '#/components/schemas/AppProtocol'
        bindAddress:
          type: string
        endorsement:
          $ref: '#/components/schemas/Endorsement'
        httpConfig:
          $ref: '#/components/schemas/HttpConfiguration'
        maxOpenSessionsHard:
          type: integer
          format: uint64
          minimum: 0
          maximum: 18446744073709552000
        maxOpenSessionsSoft:
          type: integer
          format: uint64
          minimum: 0
          maximum: 18446744073709552000
        protocol:
          type: string
        publishedAddress:
          type: string
      required:
        - bindAddress
    Pem:
      type: object
      properties:
        pemValue:
          type: string
          format: pem
      required:
        - pemValue
    Proposal:
      type: object
      properties:
        actions:
          $ref: '#/components/schemas/ActionArray'
      required:
        - actions
    ProposalInfo:
      type: object
      properties:
        ballots:
          $ref: '#/components/schemas/MemberIdToString'
        failure:
          $ref: '#/components/schemas/Failure'
        finalVotes:
          $ref: '#/components/schemas/MemberIdToBoolean'
        proposerId:
          type: string
          format: hex
          pattern: ^[a-f0-9]{64}$
        state:
          $ref: '#/components/schemas/ProposalState'
        voteFailures:
          $ref: '#/components/schemas/MemberIdToFailure'
      required:
        - ballots
        - proposerId
        - state
        - voteFailures
    ProposalInfoSummary:
      type: object
      properties:
        ballotCount:
          type: integer
          format: uint64
        failure:
          $ref: '#/components/schemas/Failure'
        proposalId:
          type: string
        proposerId:
          type: string
          format: hex
          pattern: ^[a-f0-9]{64}$
        state:
          $ref: '#/components/schemas/ProposalState'
        voteFailures:
          $ref: '#/components/schemas/MemberIdToFailure'
        votes:
          $ref: '#/components/schemas/MemberIdToBoolean'
      required:
        - ballotCount
        - proposalId
        - proposerId
        - state
    ProposalState:
      type: string
      enum:
        - Open
        - Accepted
        - Withdrawn
        - Rejected
        - Failed
        - Dropped
    QuoteFormat:
      type: string
      enum:
        - OE_SGX_v1
        - Insecure_Virtual
        - AMD_SEV_SNP_v1
    QuoteInfo:
      type: object
      properties:
        endorsements:
          type: string
          format: base64
        format:
          $ref: '#/components/schemas/QuoteFormat'
        quote:
          type: string
          format: base64
      required:
        - endorsements
        - format
        - quote
    RPCInterfaces:
      type: object
      properties:
        acceptedEndpoints:
          type: array
          items:
            type: string
          x-cadl-name: string[]
        appProtocol:
          $ref: '#/components/schemas/AppProtocol'
        bindAddress:
          type: string
        endorsement:
          $ref: '#/components/schemas/Endorsement'
        httpConfig:
          $ref: '#/components/schemas/HttpConfiguration'
        maxOpenSessionsHard:
          type: integer
          format: uint64
          minimum: 0
          maximum: 18446744073709552000
        maxOpenSessionsSoft:
          type: integer
          format: uint64
          minimum: 0
          maximum: 18446744073709552000
        protocol:
          type: string
        publishedAddress:
          type: string
      required:
        - bindAddress
    ServiceConfiguration:
      type: object
      properties:
        consensus:
          $ref: '#/components/schemas/ConsensusType'
        maxNodeCertValidityDays:
          type: integer
          format: uint64
        maxServiceCertValidityDays:
          type: integer
          format: uint64
        recentCoseProposalsWindowSize:
          type: integer
          format: uint64
        reconfigurationType:
          $ref: '#/components/schemas/reconfigurationType'
        recoveryThreshold:
          type: integer
          format: uint64
      required:
        - consensus
        - recoveryThreshold
    ServiceInfo:
      type: object
      properties:
        cert:
          $ref: '#/components/schemas/Pem'
        currentServiceCreateTxId:
          type: string
          pattern: ^[0-9]+\.[0-9]+$
        prevServiceIdentityVersion:
          type: integer
          format: uint64
        recoveryCount:
          type: integer
          format: uint64
        serviceData:
          $ref: '#/components/schemas/Json'
        status:
          $ref: '#/components/schemas/ServiceStatus'
      required:
        - cert
        - status
    ServiceStatus:
      type: string
      enum:
        - Opening
        - Open
        - WaitingForRecoveryShares
        - Recovering
    SignedReq:
      type: object
      properties:
        keyId:
          type: string
        req:
          type: string
          format: base64
        md:
          $ref: '#/components/schemas/MDType'
        requestBody:
          type: string
          format: base64
        sig:
          type: string
          format: base64
      required:
        - keyId
        - req
        - md
        - requestBody
        - sig
    StateDigest:
      type: object
      properties:
        state_digest:
          type: string
      required:
        - state_digest
    StringToBase64:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/MemberIdToBase64'
      required:
        - additionalProperties
    StringToJwtIssuerMetadata:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/JwtIssuerMetadata'
      required:
        - additionalProperties
    StringToPem:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/Pem'
      required:
        - additionalProperties
    StringToProposalInfo:
      type: object
      properties:
        additionalProperties:
          $ref: '#/components/schemas/ProposalInfo'
      required:
        - additionalProperties
    StringtoString:
      type: object
      properties:
        additionalProperties:
          type: string
      required:
        - additionalProperties
    SubmitRecoveryShareIn:
      type: object
      properties:
        share:
          type: string
      required:
        - share
    SubmitRecoveryShareOut:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          pattern: ^[0-9]+\.[0-9]+$
      required:
        - transactionId
    TxStatus:
      type: string
      enum:
        - Unknown
        - Pending
        - Committed
        - Invalid
    UserDetails:
      type: object
      properties:
        userData:
          $ref: '#/components/schemas/Json'
      required:
        - userData
    UserIdToPem:
      type: object
      properties:
        Id:
          $ref: '#/components/schemas/Pem'
      required:
        - Id
    reconfigurationType:
      type: string
      enum:
        - OneTransaction
        - TwoTransaction
